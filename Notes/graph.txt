Contains some standard graph tricks


////////////////////////////////////////////////////////////
//                                                        //
//                                                        //
//                       Graph                            //
//                                                        //
////////////////////////////////////////////////////////////

1. Remember bridges and articulate points (removing any one of them would make the graph disconnected)

2. Use bfs when in unweighted graphs , dont go for dijkstra everytime

3. Use topsort / kosaraju if we need to just find scc , can also use tarjan if they ask for some lexico stuff

4. if graph is DAG use topsort method to find shortest path

5. [IMP]: for finding odd cycles just check if bipartite

6. [VVVVVVVVVV IMP]: Sometimes in graph questions involving finding distances/any associative function we can use "BINARY JUMPS METHOD" even if graph contains cycles.

7. Adding some number to all edges to get target value for all nodes, think in lines of bipartite graph

////////////////////////////////////////////////////////////
//                                                        //
//                                                        //
//                       Tree                             //
//                                                        //
////////////////////////////////////////////////////////////


1. sum of Xor on all paths --> just pairwise xor and then sum on xor value arr obtained from dfs

2. Re rooting technique if asked for some associative couting on trees

3. Segment tree subtree trick

4. [VVVV IMP]: In small to merge technique you have to be very careful always store the answer of larger set while swapping , dont recompute the answer with merged set
   In the same technique sometimes use bitset (when some checking for palindrome comes) as it will reduce memory hugely

5. sum of max distance between all pairs of nodes --> sort edges and dsu from lowest weight.