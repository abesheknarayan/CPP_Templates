{

	"Abeshek C++ Template": {
		"prefix": "lcatemp",
		"body": [
			"// change N accordingly",
"const int N = 1e5 + 5;",
"vll v[N];",
"ll vis[N];",
"ll table[25][N];",
"ll dep[N];",
"ll par[N];",
"ll n;",
"",
"void dfs(ll x, ll depp)",
"{",
    "\tvis[x] = 1;",
    "\tdep[x] = depp;",
    "\tfor (auto it : v[x])",
    "\t{",
        "\t\tif (!vis[it])",
        "\t\t{",
            "\t\t\tpar[it] = x;",
            "\t\t\tdfs(it, depp + 1);",
        "\t\t}",
    "\t}",
"}",
"",
"//\ttable\tfor\tLCA",
"void buildLCA()",
"{",
    "\tll i, j;",
    "\tmemset(table, -1, sizeof(table));",
    "\tfor (i = 0; i < n; i++)",
    "\t{",
        "\t\ttable[0][i] = par[i];",
    "\t}",
    "\tll lg2 = log2(n);",
    "\tfor (i = 1; i <= 20; i++)",
    "\t{",
        "\t\tfor (j = 0; j < n; j++)",
        "\t\t{",
            "\t\t\tif (table[i - 1][j] != -1)",
            "\t\t\t{",
                "\t\t\t\ttable[i][j] = table[i - 1][table[i - 1][j]];",
            "\t\t\t}",
            "\t\t\telse",
            "\t\t\t{",
                "\t\t\t\ttable[i][j] = -1;",
            "\t\t\t}",
        "\t\t}",
    "\t}",
"}",
"ll findKthAncestor(ll u, ll k)",
"{",
    "\tll cur = u;",
    "\tll i;",
    "\tfor (i = 20; i >= 0; i--)",
    "\t{",
        "\t\tif ((1ll << i) & k)",
        "\t\t{",
            "\t\t\tif (cur == -1)",
            "\t\t\t{",
                "\t\t\t\treturn -1;",
            "\t\t\t}",
            "\t\t\tcur = table[i][cur];",
        "\t\t}",
    "\t}",
    "\treturn cur;",
"}",
"",
"ll getLCA(ll x, ll y)",
"{",
    "\tif (dep[x] > dep[y])",
    "\t{",
        "\t\tll dif = dep[x] - dep[y];",
        "\t\tx = findKthAncestor(x, dif);",
    "\t}",
    "\telse if (dep[y] > dep[x])",
    "\t{",
        "\t\tll dif = dep[y] - dep[x];",
        "\t\ty = findKthAncestor(y, dif);",
    "\t}",
"",
    "\tif (x == y)",
    "\t{",
        "\t\treturn x;",
    "\t}",
    "\tll fdep = dep[x];",
    "\tll l = 1, r = fdep + 5;",
    "\tll fans = -1;",
    "\twhile (l <= r)",
    "\t{",
        "\t\tll mid = l + (r - l) / 2;",
        "\t\tll node1 = findKthAncestor(x, mid);",
        "\t\tll node2 = findKthAncestor(y, mid);",
        "\t\tif (node1 == node2)",
        "\t\t{",
            "\t\t\tfans = node1;",
            "\t\t\tr = mid - 1;",
        "\t\t}",
        "\t\telse",
        "\t\t{",
            "\t\t\tl = mid + 1;",
        "\t\t}",
    "\t}",
    "\treturn fans;",
"}",
"",
"ll getdis(ll x, ll y)",
"{",
    "\tll lca = getLCA(x, y);",
    "\treturn dep[x] + dep[y] - 2 * dep[lca];",
"}",
"//change N"
		],
		"description": "My custom lca template"
	}
}