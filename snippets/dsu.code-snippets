{

	"Abeshek C++ Template": {
		"prefix": "dsutemp",
		"body": [
			"struct DSU{",
    "\t// rank heuristical DSU",
    "\tll n,noc;",
    "\tvll par,siz,rank;",
"",
    "\tDSU(ll N)",
    "\t{",
        "\t\tn=N,noc=N;",
        "\t\tpar.assign(N,1);",
        "\t\tsiz.assign(N,1);",
        "\t\trank.assign(N,1);",
        "\t\tfor(ll i=0;i<N;i++)",
        "\t\t{",
            "\t\t\tpar[i]=i;",
        "\t\t}",
    "\t}",
    "\tll get(ll x)",
    "\t{",
        "\t\treturn (par[x]==x?x:get(par[x]));",
    "\t}",
    "\tbool sameset(ll x,ll y)",
    "\t{",
        "\t\treturn get(x)==get(y);",
    "\t}",
    "\tvoid join(ll x,ll y)",
    "\t{",
        "\t\tx = get(x);",
        "\t\ty = get(y);",
        "\t\tif(x!=y)",
        "\t\t{",
            "\t\t\tnoc--;",
            "\t\t\tif(rank[x]>=rank[y])",
            "\t\t\t{",
                "\t\t\t\tif(rank[x]==rank[y])rank[x]++;",
                "\t\t\t\t// unite y with x",
                "\t\t\t\tpar[y]=x;",
                "\t\t\t\tsiz[x]+=siz[y];",
            "\t\t\t}",
            "\t\t\telse{",
                "\t\t\t\t// unite x with y",
                "\t\t\t\tpar[x]=y;",
                "\t\t\t\tsiz[y]+=siz[x];",
            "\t\t\t}",
        "\t\t}",
    "\t}",
"",
    "\tll no_comp()",
    "\t{",
        "\t\treturn noc;",
    "\t}",
    "\tll size_of_comp(ll x)",
    "\t{",
        "\t\treturn siz[get(x)];",
    "\t}",
"};",
""
		],		"description": "dsu template"
	}
}